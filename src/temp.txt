import uk.co.badgersinfoil.metaas.ActionScriptFactory;
import uk.co.badgersinfoil.metaas.ActionScriptParser;
import uk.co.badgersinfoil.metaas.ActionScriptProject;
import uk.co.badgersinfoil.metaas.dom.*;

import javax.sound.midi.SysexMessage;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Iterator;
import java.util.List;

public class Main {


    public static void main(String[] args) throws IOException {
        FileInputStream in = new FileInputStream("Tests.as");
        InputStreamReader reader = new InputStreamReader(in);
        ActionScriptFactory fact = new ActionScriptFactory();
        ActionScriptParser parser = fact.newParser();
        ASCompilationUnit unit = parser.parse(reader);

        ActionScriptProject project = fact.newEmptyASProject(".");
        ASCompilationUnit unit2 = project.newClass("TestT");
        ASClassType clazz = (ASClassType) unit2.getType();





        if (unit.getPackage().equals(unit.getPackage())) {
            System.out.println("IHU");
        }
        else {
            System.out.println("NO");
        }


        ASPackage pkg = unit.getPackage();
        ASType type = pkg.getType();

        Visibility v = type.getVisibility();

        System.out.println(v);



        List methods = type.getMethods();

        for (Object method1 : methods) {
            ASMethod method = (ASMethod) method1;
            ASMethod methodT = clazz.newMethod(method.getName(),method.getVisibility(),method.getType());

            List argsT =  method.getArgs();
            for (Object arg: argsT) {
                ASArg arg1 = (ASArg) arg;
                String name = arg1.getName();
                String typeA = arg1.getType();
                String def = arg1.getDefaultString();

                if (def != null) {
                    System.out.println(def);
                }


                methodT.addParam(name,typeA);


            }


            ASFunctionExpression wrap = fact.newFunctionExpression();




            List l = method.getStatementList();


            for (Object s: l) {
                Statement s2  = (Statement) s;
                wrap.addStmt(s2.toString());
            }

            ASDeclarationStatement end = methodT.newDeclaration("__wrap__ = " + wrap.toString());
            //methodT.addStmt(end.toString());


            methodT.addStmt("return __wrap__.apply(this,arguments);");


            //methodT.newExprStmt(wrap);
            //methodT.newReturn(wrap);



        }
        project.writeAll();

    }

    public static void main2(String[] args) throws IOException {
        /*
        ActionScriptFactory fact = new ActionScriptFactory();
        ActionScriptProject project = fact.newEmptyASProject(".");
        ASCompilationUnit unit = project.newClass("Tests");
        ASClassType clazz = (ASClassType) unit.getType();
        ASMethod method = clazz.newMethod("test", Visibility.PUBLIC, "void");
        method.addStmt("trace('Hello world')");
        project.writeAll();
        */

        FileInputStream in = new FileInputStream("Tests.as");
        InputStreamReader reader = new InputStreamReader(in);
        ActionScriptFactory fact = new ActionScriptFactory();
        ActionScriptParser parser = fact.newParser();
        ASCompilationUnit unit = parser.parse(reader);

        System.out.println("EJEMPLOS");


        ASPackage pkg = unit.getPackage();
        ASType type = pkg.getType();

        System.out.println("Class Name:"+type.getName());
        System.out.println("Metodos:");

        List methods = type.getMethods();

        for (Object method1 : methods) {
            ASMethod method = (ASMethod) method1;
            List args1 = method.getArgs();

            System.out.println("\nNombre:"+method.getName());
            System.out.println("return:"+method.getType());
            System.out.println("Access:"+method.getAccessorRole());
            System.out.println("Access:"+method.getVisibility());
            System.out.println("Static:"+method.isStatic());
            System.out.println("statements:"+method.getStatementList().size());

            for (Object statement1 : method.getStatementList()) {
                Statement statement = (Statement) statement1;
                System.out.println(statement);
            }



            for (Object anArgs1 : args1) {
                ASArg arg = (ASArg) anArgs1;
                System.out.println("Arg:"+arg.getName()+" type:"+arg.getType());
            }



        }

    }
}
